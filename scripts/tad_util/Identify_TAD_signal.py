"""
2016 Gregory Way
TAD Pathways
scripts/tad_util/Identify_TAD_signal.py

Description:
Uses TAD boundaries and trait specific GWAS files that were generated by
'scripts/NHGRI-EBI_GWAS_summary.R' to output an intermediate file of TAD
coordinates for each significant SNP

Usage:
Is called by 'scripts/build_TAD_genelists.py'

Output:
Intermediate files 'data/gwas_TAD_location/', which are summaries of each SNP
and which TAD they fall in. The format of the output files by row is:
[rs, Chromosome, SNP Coordinate, TAD Start, TAD End, TAD ID, nearest gene]
"""

import argparse
from collections import OrderedDict
import pandas as pd


def assign_tad(snp_signal, tad_boundary):
    """
    Take an input snp signal and TAD boundary coordinates to output the
    coordinates of TAD where the SNP signal resides.

    Arguments:
    :param snp_signal: Pandas Series with SNP descriptive attributes
    :param tad_boundary: a Pandas DataFrame of all TADs and genomic locations

    Output:
    an OrderedDict object storing SNP and TAD specific info
    """
    chrom = ('chrom', snp_signal.chrom)
    snp_loc = ('snploc', snp_signal.position)
    snp = ('rs', snp_signal.snp)

    mapped_gene = snp_signal.mapped_gene

    mapped_gene = mapped_gene.replace(' - ', ',')
    mapped_gene = mapped_gene.replace(' ', '')
    mapped_gene = ('gene', mapped_gene)

    if snp_loc[1] == 'Not Mapped':
        tad_start = ('TADStart', '')
        tad_end = ('TADEnd', '')
        tad_idx = ('TADidx', '')

        return OrderedDict([snp, chrom, snp_loc, tad_start, tad_end, tad_idx,
                            mapped_gene])
    else:
        snp_loc = ('snploc', int(snp_loc[1]))

    tad = tad_boundary.ix[
        (tad_boundary.chrom == chrom[1]) &
        (tad_boundary.start <= snp_loc[1]) &
        (tad_boundary.stop > snp_loc[1])
    ]

    if tad.shape[0] == 0:
        tad_start = ('TADStart', '')
        tad_end = ('TADEnd', '')
        tad_idx = ('TADidx', '')
    else:
        tad_start = ('TADStart', int(tad.start))
        tad_end = ('TADEnd', int(tad.stop))
        tad_idx = ('TADidx', int(tad.index.tolist()[0]))

    return OrderedDict([snp, chrom, snp_loc, tad_start, tad_end, tad_idx,
                        mapped_gene])

# Load Command Arguments
parser = argparse.ArgumentParser()
parser.add_argument("-t", "--tad_data", help="Location of TAD data")
parser.add_argument("-g", "--gwas_data", help="Location of GWAS data")
parser.add_argument("-o", "--output_file", help="Name of the output file")
args = parser.parse_args()

# Load Constants
tad_data = args.tad_data
gwas_data = args.gwas_data
output_file = args.output_file

# Load and process data
tad_boundary_df = pd.read_table(tad_data, names=['chrom', 'start', 'stop'])
gwas_df = pd.read_table(gwas_data, names=['snp', 'chrom', 'position',
                                          'trait', 'reported_gene',
                                          'mapped_gene', 'pubmed_id'],
                        skiprows=1)
gwas_df = gwas_df[~gwas_df['mapped_gene'].isnull()]

# Output results
snp_tad_df = gwas_df.apply(lambda x: assign_tad(x, tad_boundary_df), axis=1)
result_col = ('rs', 'chrom', 'snploc', 'TADStart', 'TADEnd', 'TADidx', 'gene')
snp_tad_df = pd.DataFrame.from_records(snp_tad_df, columns=result_col)
snp_tad_df.to_csv(output_file, index=False, header=True, sep='\t')
